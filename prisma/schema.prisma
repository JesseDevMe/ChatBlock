// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  id                   String  @id @default(cuid())
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String          @id @default(cuid())
  name          String
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  Conversations Conversation[]
  groups        Group[]
  lastSeen      DateTime?
  messages      Message[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Conversation {
  id                 String    @id @default(cuid())
  messages           Message[]
  notificationEnable Boolean?   @default(true)
  block              Boolean?   @default(false)
  Users              User[]
  groups             Group[]
}

model Group {
  id            String         @id @default(cuid())
  name          String
  conversations Conversation[]
  userId        String
  user          User           @relation(fields: [userId], references: [id])
}

model Message {
  id              String         @id @default(cuid())
  text            String
  replyMessageId  String?
  replyMessage    Message?       @relation("Reply", fields: [replyMessageId], references: [id])
  repliedMessages Message[]      @relation("Reply")
  img             String?
  date            DateTime       @default(now())
  isSeen          Boolean        @default(false)
  senderId        String
  sender          User           @relation(fields: [senderId], references: [id])
  conversation    Conversation[]
}
